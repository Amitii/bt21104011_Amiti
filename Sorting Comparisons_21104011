#include <iostream>              
using namespace std;           
// Amiti 21104011
//1.
void bubble_sort(int arr[],int n){
    int i=0,j=1,t=n-1;
    int no_of_swap=0;
    int no_of_comp=0;
    while(t>0){
        while(j<=t){
            if(arr[i]>arr[j]){swap(arr[i],arr[j]);no_of_swap++;}
            i++,j++;
            no_of_comp++;
        }
        t--;
        i=0,j=1;
    }
    cout<<" . Number of SWAP:"<<no_of_swap<<endl;
    cout<<" . Number of COMPARISON:"<<no_of_comp<<endl;
    cout<<" . [INPLACE SORTING ALGORITHM USED]"<<endl;
}

//2.
int min_ind(int arr[],int si,int ei){
   
    int m=arr[si];             
    int min_ind=si;           
    for(int i=si;i<=ei;i++){
        int min_prev=m;
        m=min(m,arr[i]);
        if(m<min_prev){min_ind=i;}
    }
    return min_ind;
}

//3.
void selection_sort(int arr[],int n){
    
    int si=0,ei=n-1;
    int no_of_swap=0;
    int no_of_comp=0;
    while(si<ei){
    int mi=min_ind(arr,si,ei);  
    no_of_comp=no_of_comp+(ei-si+1);
    if(si!=mi){swap(arr[si],arr[mi]);
    no_of_swap++;}
    si++;
    }
    cout<<" . Number of SWAP:"<<no_of_swap<<endl;
    cout<<" . Number of COMPARISON:"<<no_of_comp<<endl;
    cout<<" . [INPLACE SORTING ALGORITHM USED]"<<endl;
}

//4.
void pfun(int arr[],int n){
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
}

int main(){
    
    int n;
    
    cout<<"Enter number of elements in array:";cin>>n;
    
    int arr1[n];int arr2[n];
    
    cout<<"Enter elements of array:";
    for(int i=0;i<n;i++){int a;cin>>a;arr1[i]=a;arr2[i]=a;}
    
    cout<<"\nARRAY before sorting:";pfun(arr1,n);
    cout<<endl;
    
    cout<<"BUBBLE SORT"<<endl;
    bubble_sort(arr1,n);
    cout<<" . ARRAY After Sorting Using Bubble Sorting:";pfun(arr1,n);
    cout<<endl;
    
    cout<<"SELECTION SORT"<<endl;
    selection_sort(arr2,n);
    cout<<" . ARRAY After Sorting Using Selection Sorting:";pfun(arr2,n);
}
//

BONUS QUESTION

TIME COMPLEXITY OF BUBBLE SORT
   From the above code of BUBBLE SORT we can see that there are two
   while loops which will we executed.First while loop will run n-1
   times and second while loop will run n-2 times and so on till 1 time.
   Time Complexity=(n-1)+(n-2)+(n-3)....+2+1=(n-1)(n)/2
                  =O(n^2)

TIME COMPLEXITY OF SELECTION SORT
    In selection sort the main time consuming task is finding minimum 
    element from the array.We have to scan all the elements of the
    array to find the minimum element.
    With reference to the above code of SELECTION SORT,first we will 
    search for minimum element in array of size n,then in the same array of size n-1,and so on till array of size 1.
    Time Complexity=(n)+(n-1)+(n-2)...1=(n)(n+1)/2
                   =O(n^2)

//
